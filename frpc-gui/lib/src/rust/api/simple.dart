// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../frb_generated.dart';
import 'models/descriptors/enum_descriptor.dart';
import 'models/descriptors/field_descriptor.dart';
import 'models/descriptors/field_type_descriptor.dart';
import 'models/descriptors/message_descriptor.dart';
import 'models/descriptors/method_descriptor.dart';
import 'models/descriptors/oneof_descriptor.dart';
import 'models/descriptors/server_descriptor.dart';
import 'models/descriptors/service_descriptor.dart';
import 'models/stream_event.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';

// These functions are ignored because they are not marked as `pub`: `to_reflection_version`

String greet({required String name}) =>
    RustLib.instance.api.crateApiSimpleGreet(name: name);

Stream<String> testInvoke(
        {required String serverUrl,
        required String target,
        required CancelableExecution cancelExec}) =>
    RustLib.instance.api.crateApiSimpleTestInvoke(
        serverUrl: serverUrl, target: target, cancelExec: cancelExec);

Stream<FluidFrontendStreamEvent> testInvokeWithPool(
        {required ServerDescriptor desc,
        required String serverUrl,
        required String target,
        required String data,
        required CancelableExecution cancelExec}) =>
    RustLib.instance.api.crateApiSimpleTestInvokeWithPool(
        desc: desc,
        serverUrl: serverUrl,
        target: target,
        data: data,
        cancelExec: cancelExec);

Future<ServerDescriptor> testGetServerDescriptor(
        {required String serverUrl,
        required ReflectionVersionMode reflectionVersionMode}) =>
    RustLib.instance.api.crateApiSimpleTestGetServerDescriptor(
        serverUrl: serverUrl, reflectionVersionMode: reflectionVersionMode);

// Rust type: RustOpaqueMoi<flutter_rust_bridge::for_generated::RustAutoOpaqueInner<CancelableExecution>>
abstract class CancelableExecution implements RustOpaqueInterface {
  void cancel();

  static Future<CancelableExecution> default_() =>
      RustLib.instance.api.crateApiSimpleCancelableExecutionDefault();

  // HINT: Make it `#[frb(sync)]` to let it become the default constructor of Dart class.
  static Future<CancelableExecution> newInstance() =>
      RustLib.instance.api.crateApiSimpleCancelableExecutionNew();
}

enum ReflectionVersionMode {
  v1,
  v1Alpha,
  autoDetect,
  ;
}
