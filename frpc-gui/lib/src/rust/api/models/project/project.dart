// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../../frb_generated.dart';
import '../connection/connection_config.dart';
import '../connection/tls_type.dart';
import '../connection/tls_types/tls_type_one_way.dart';
import '../connection/tls_types/tls_type_two_way.dart';
import '../environment/environment.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'project.freezed.dart';

// These functions are ignored because they are not marked as `pub`: `check_create_dir`
// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`, `fmt`

class FileProjectLoader {
  final List<String> protoPaths;
  final String includePath;

  const FileProjectLoader({
    required this.protoPaths,
    required this.includePath,
  });

  @override
  int get hashCode => protoPaths.hashCode ^ includePath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FileProjectLoader &&
          runtimeType == other.runtimeType &&
          protoPaths == other.protoPaths &&
          includePath == other.includePath;
}

class LoadedProject {
  final Project project;
  final String projectDirectoryPath;

  const LoadedProject({
    required this.project,
    required this.projectDirectoryPath,
  });

  @override
  int get hashCode => project.hashCode ^ projectDirectoryPath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is LoadedProject &&
          runtimeType == other.runtimeType &&
          project == other.project &&
          projectDirectoryPath == other.projectDirectoryPath;
}

class Project {
  final String id;
  final String displayName;
  final List<Environment> environments;
  final ProjectLoader loaderType;
  final String? iconPath;

  const Project({
    required this.id,
    required this.displayName,
    required this.environments,
    required this.loaderType,
    this.iconPath,
  });

  static String getDefaultAvatar({required String displayName}) =>
      RustLib.instance.api.crateApiModelsProjectProjectProjectGetDefaultAvatar(
          displayName: displayName);

  static Future<LoadedProject?> loadProject({required String configFilePath}) =>
      RustLib.instance.api.crateApiModelsProjectProjectProjectLoadProject(
          configFilePath: configFilePath);

  Future<void> save({required String projectDirectoryPath}) =>
      RustLib.instance.api.crateApiModelsProjectProjectProjectSave(
          that: this, projectDirectoryPath: projectDirectoryPath);

  @override
  int get hashCode =>
      id.hashCode ^
      displayName.hashCode ^
      environments.hashCode ^
      loaderType.hashCode ^
      iconPath.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is Project &&
          runtimeType == other.runtimeType &&
          id == other.id &&
          displayName == other.displayName &&
          environments == other.environments &&
          loaderType == other.loaderType &&
          iconPath == other.iconPath;
}

@freezed
sealed class ProjectLoader with _$ProjectLoader {
  const ProjectLoader._();

  const factory ProjectLoader.serverReflection() =
      ProjectLoader_ServerReflection;
  const factory ProjectLoader.file(
    FileProjectLoader field0,
  ) = ProjectLoader_File;
}
