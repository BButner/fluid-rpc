// This file is automatically generated, so please do not edit it.
// Generated by `flutter_rust_bridge`@ 2.1.0.

// ignore_for_file: invalid_use_of_internal_member, unused_import, unnecessary_import

import '../../frb_generated.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge_for_generated.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;
part 'stream_event.freezed.dart';

// These function are ignored because they are on traits that is not defined in current crate (put an empty `#[frb]` on it to unignore): `fmt`, `fmt`, `fmt`, `from`, `from`, `from`

class FluidError {
  final DateTime dateTime;
  final String error;

  const FluidError({
    required this.dateTime,
    required this.error,
  });

  @override
  int get hashCode => dateTime.hashCode ^ error.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FluidError &&
          runtimeType == other.runtimeType &&
          dateTime == other.dateTime &&
          error == other.error;
}

@freezed
sealed class FluidFrontendStreamEvent with _$FluidFrontendStreamEvent {
  const FluidFrontendStreamEvent._();

  const factory FluidFrontendStreamEvent.initiatingConnection(
    DateTime field0,
  ) = FluidFrontendStreamEvent_InitiatingConnection;
  const factory FluidFrontendStreamEvent.connected(
    DateTime field0,
  ) = FluidFrontendStreamEvent_Connected;
  const factory FluidFrontendStreamEvent.error(
    FluidError field0,
  ) = FluidFrontendStreamEvent_Error;
  const factory FluidFrontendStreamEvent.streamingMessageReceived(
    FluidMessageReceived field0,
  ) = FluidFrontendStreamEvent_StreamingMessageReceived;
  const factory FluidFrontendStreamEvent.unaryMessageReceived(
    FluidMessageReceived field0,
  ) = FluidFrontendStreamEvent_UnaryMessageReceived;
}

class FluidMessageReceived {
  final DateTime dateTime;
  final String contents;

  const FluidMessageReceived({
    required this.dateTime,
    required this.contents,
  });

  @override
  int get hashCode => dateTime.hashCode ^ contents.hashCode;

  @override
  bool operator ==(Object other) =>
      identical(this, other) ||
      other is FluidMessageReceived &&
          runtimeType == other.runtimeType &&
          dateTime == other.dateTime &&
          contents == other.contents;
}
